package com.hs.bdes.providerorg

import com.esi.dpe.config.ConfigParser
import com.esi.dpe.custom.Transform
import com.hs.bdes.util.AppUtil.initialMapping
import com.hs.bdes.util.JsonUtils.{getJSONValue, getVal, loop}
import com.hs.bdes.util.TimeZoneUtils._
import com.typesafe.config.Config
import com.typesafe.scalalogging.LazyLogging
import org.apache.spark.sql.{DataFrame, Row}
import org.apache.spark.sql.expressions.UserDefinedFunction
import org.apache.spark.sql.functions._
import org.json4s.jackson.JsonMethods.parse
import org.json4s.{JObject, JValue}

import java.sql.{Date, Timestamp}
import java.text.SimpleDateFormat
import java.util.Calendar
import scala.util.Try

class ProviderOrgEntityTransform extends Transform with LazyLogging with Serializable {

  def parseJson(str: String): JValue = Try {
    parse(str)
  }.getOrElse(null)

  case class getProviderOrganizationStoreKeySchema(store_nm: String, key_nm: String, primary_store_ind: Boolean, component_nm: String, component_value_txt: String, status_desc: String,
                                             status_effective_ts: Timestamp, status_effective_tms_txt: String, status_effective_timezone_txt: String, status_expiration_ts: Timestamp,
                                             status_expiration_tms_txt: String, status_expiration_timezone_txt: String)
  case class getProviderOrganizationTaxonomySchema(taxonomy_cd: String, provider_organization_taxonomy_relative_id: String, primary_taxonomy_ind: Boolean, taxonomy_type_cd: String,
                                             taxonomy_specialization_desc: String, taxonomy_category_desc: String, sourced_from_source_nm: String, sourced_from_source_type_desc: String,
                                             sourced_from_method_desc: String, sourced_from_update_ts: Timestamp, sourced_from_update_tms_txt: String, sourced_from_update_timezone_txt: String,
                                             status_desc: String, status_effective_ts: Timestamp, status_effective_tms_txt: String, status_effective_timezone_txt: String,
                                             status_expiration_ts: Timestamp, status_expiration_tms_txt: String, status_expiration_timezone_txt: String)
  case class getProviderOrganizationEmailAddressSchema(email_address_txt: String, provider_organization_email_address_relative_id: String, status_desc: String, status_effective_ts: Timestamp,
                                                       status_effective_tms_txt: String, status_effective_timezone_txt: String, status_expiration_ts: Timestamp, status_expiration_tms_txt: String,
                                                       status_expiration_timezone_txt: String, sourced_from_source_nm: String, sourced_from_source_type_desc: String,
                                                       sourced_from_method_desc: String, sourced_from_update_ts: Timestamp, sourced_from_update_tms_txt: String, sourced_from_update_timezone_txt: String,
                                                       unreachable_ind: Boolean, unreachable_effective_ts: Timestamp, unreachable_effective_tms_txt: String, unreachable_effective_timezone_txt: String,
                                                       unreachable_note_txt: String, unverified_ind: Boolean, unverified_effective_ts: Timestamp, unverified_effective_tms_txt: String,
                                                       unverified_effective_timezone_txt: String, unverified_note_txt: String)
  case class getProviderOrganizationPhoneConfirmationEffectivitySchema(provider_organization_phone_confirmation_id: String, start_tms_txt: String, end_tms_txt: String, received_tms_txt: String,
                                                                       ceased_tms_txt: String, start_ts: Timestamp, start_tms_timezone_txt: String, end_ts: Timestamp, end_tms_timezone_txt: String,
                                                                       received_ts: Timestamp, received_tms_timezone_txt: String, ceased_ts: Timestamp, ceased_tms_timezone_txt: String, ceased_cd: String)
  case class getProviderOrganizationPhoneConfirmationSchema(provider_organization_phone_confirmation_id: String, provider_organization_postal_address_id: String, provider_organization_phone_number_id: String,
                                                            secured_confirmation_ind: Boolean, secured_verification_rationale_txt: String,
                                                            provider_organization_phone_confirmation_effectivity: List[getProviderOrganizationPhoneConfirmationEffectivitySchema])
  case class getProviderOrganizationPhoneSchema(provider_organization_phone_id: String, provider_organization_phone_relative_id: String, provided_phone_nbr_txt: String, contact_usage_type_desc: String,
                                          country_calling_cd: String, phone_number_txt: String, phone_number_extension_txt: String, fax_capability_ind: Boolean, voice_capability_ind: Boolean,
                                          text_capability_ind: Boolean, status_desc: String, status_effective_ts: Timestamp, status_effective_tms_txt: String, status_effective_timezone_txt: String,
                                          status_expiration_ts: Timestamp, status_expiration_tms_txt: String, status_expiration_timezone_txt: String, sourced_from_source_nm: String,
                                          sourced_from_source_type_desc: String, sourced_from_method_desc: String, sourced_from_update_ts: Timestamp, sourced_from_update_tms_txt: String,
                                          sourced_from_update_timezone_txt: String, standardized_ind: Boolean, unreachable_ind: Boolean, unreachable_effective_ts: Timestamp,
                                          unreachable_effective_tms_txt: String, unreachable_effective_timezone_txt: String, unreachable_note_txt: String, unverified_ind: Boolean,
                                          unverified_effective_ts: Timestamp, unverified_effective_tms_txt: String, unverified_effective_timezone_txt: String, unverified_note_txt: String,
                                          provider_organization_postal_address_id: List[String], provider_organization_phone_confirmation: List[getProviderOrganizationPhoneConfirmationSchema])
  case class getProviderOrganizationPostalAddressSchema(provider_organization_postal_address_id: String, provider_organization_postal_address_relative_id: String, contact_usage_type_desc: String,
                                                        street_address_lines_txt: List[String], apartment_number_txt: String, office_suite_txt: String, post_office_box_txt: String,
                                                        postal_cd: String, city_nm: String, state_cd: String, state_nm: String, state_desc: String, country_iso_alpha2_cd: String,
                                                        country_iso_alpha3_cd: String, country_nm: String, country_desc: String, standardized_ind: Boolean, provided_street_address_lines_txt: List[String],
                                                        provided_city_txt: String, provided_postal_cd_txt: String, provided_state_txt: String, provided_country_txt: String, sourced_from_source_nm: String,
                                                        sourced_from_source_type_desc: String, sourced_from_method_desc: String, sourced_from_update_ts: Timestamp, status_desc: String, status_effective_ts: Timestamp,
                                                        status_effective_tms_txt: String, status_effective_timezone_txt: String, status_expiration_ts: Timestamp, status_expiration_tms_txt: String,
                                                        status_expiration_timezone_txt: String, temporary_effective_ts: Timestamp, temporary_effective_tms_txt: String, temporary_effective_timezone_txt: String,
                                                        temporary_expiration_ts: Timestamp, temporary_expiration_tms_txt: String, temporary_expiration_timezone_txt: String, temporary_note_txt: String,
                                                        unreachable_ind: Boolean, unreachable_effective_ts: Timestamp, unreachable_effective_tms_txt: String, unreachable_effective_timezone_txt: String,
                                                        unreachable_note_txt: String, unverified_ind: Boolean, unverified_effective_ts: Timestamp, unverified_effective_tms_txt: String,
                                                        unverified_effective_timezone_txt: String, unverified_note_txt: String, usps_address_type_desc: String)
  case class getProviderOrganizationDeaAuthorizationSchema(schedule_1_ind: Boolean, schedule_2_ind: Boolean, schedule_2n_ind: Boolean, schedule_3_ind: Boolean, schedule_3n_ind: Boolean,
                                                           schedule_4_ind: Boolean, schedule_5_ind: Boolean, list_1_ind: Boolean, status_desc: String, status_effective_ts: Timestamp,
                                                           status_effective_tms_txt: String, status_effective_timezone_txt: String, status_expiration_ts: Timestamp,
                                                           status_expiration_tms_txt: String, status_expiration_timezone_txt: String)
  case class getProviderOrganizationDeaIdEffectivitySchema(start_tms_txt: String, end_tms_txt: String, received_tms_txt: String, ceased_tms_txt: String, start_ts: Timestamp, start_timezone_txt: String,
                                                           end_ts: Timestamp, end_timezone_txt: String, received_ts: Timestamp, received_timezone_txt: String, ceased_ts: Timestamp,
                                                           ceased_timezone_txt: String, ceased_cd: String, ceased_desc: String)
  case class getProviderOrganizationDeaIdSchema(dea_registration_num: String, registered_location_desc: String, registered_state_cd: String, provider_organization_postal_address_id: String,
                                                issuing_agency_desc: String, issuing_state_nm: String, issuing_state_desc: String, status_desc: String, status_effective_ts: Timestamp,
                                                status_effective_tms_txt: String, status_effective_timezone_txt: String, status_expiration_ts: Timestamp, status_expiration_tms_txt: String,
                                                status_expiration_timezone_txt: String, business_activity_cd: String, business_subactivity_cd: String, business_activity_subtype_desc: String,
                                                provider_organization_dea_authorization: List[getProviderOrganizationDeaAuthorizationSchema], provider_organization_dea_id_effectivity: List[getProviderOrganizationDeaIdEffectivitySchema])
  case class getProviderOrganizationMedicaidIdEffectivitySchema(medicaid_identifier: String, issuing_state_cd: String, start_tms_txt: String, end_tms_txt: String, received_tms_txt: String,
                                                                ceased_tms_txt: String, start_ts: Timestamp, start_timezone_txt: String, end_ts: Timestamp, end_timezone_txt: String, received_ts: Timestamp,
                                                                received_timezone_txt: String, ceased_ts: Timestamp, ceased_timezone_txt: String, ceased_cd: String, ceased_desc: String)
  case class getProviderOrganizationMedicaidIdSchema(medicaid_provider_num: String, issuing_state_cd: String, issuing_location_desc: String, issuing_agency_desc: String, issuing_state_nm: String,
                                                     issuing_state_desc: String, status_desc: String, status_effective_ts: Timestamp, status_effective_tms_txt: String, status_effective_timezone_txt: String,
                                                     status_expiration_ts: Timestamp, status_expiration_tms_txt: String, status_expiration_timezone_txt: String,
                                                     provider_organization_medicaid_id_effectivity: List[getProviderOrganizationMedicaidIdEffectivitySchema])
  case class getProviderOrganizationNpiEffectivitySchema(start_tms_txt: String, end_tms_txt: String, received_tms_txt: String, ceased_tms_txt: String, start_ts: Timestamp,
                                                         start_timezone_txt: String, end_ts: Timestamp, end_timezone_txt: String, received_ts: Timestamp, received_timezone_txt: String,
                                                         ceased_ts: Timestamp, ceased_timezone_txt: String, ceased_cd: String, ceased_desc: String)
  case class getProviderOrganizationNpiSchema(npi_num: String, issuing_state_cd: String, issuing_location_desc: String, issuing_agency_desc: String, issuing_state_nm: String, issuing_state_desc: String,
                                              status_desc: String, status_effective_ts: Timestamp, status_effective_tms_txt: String, status_effective_timezone_txt: String, status_expiration_ts: Timestamp,
                                              status_expiration_tms_txt: String, status_expiration_timezone_txt: String, provider_organization_npi_effectivity: List[getProviderOrganizationNpiEffectivitySchema])
  case class getProviderOrganizationSpiEffectivitySchema(start_tms_txt: String, end_tms_txt: String, received_tms_txt: String, ceased_tms_txt: String, start_ts: Timestamp, start_timezone_txt: String,
                                                         end_ts: Timestamp, end_timezone_txt: String, received_ts: Timestamp, received_timezone_txt: String, ceased_ts: Timestamp, ceased_timezone_txt: String,
                                                         ceased_cd: String, ceased_desc: String)
  case class getProviderOrganizationSpiSchema(spi_id: String, issuing_state_cd: String, issuing_location_desc: String, issuing_agency_desc: String, issuing_state_nm: String,
                                              issuing_state_desc: String, status_desc: String, status_effective_ts: Timestamp, status_effective_tms_txt: String, status_effective_timezone_txt: String,
                                              status_expiration_ts: Timestamp, status_expiration_tms_txt: String, status_expiration_timezone_txt: String,
                                              provider_organization_spi_effectivity: List[getProviderOrganizationSpiEffectivitySchema])

  private def getProviderOrganizationStoreKeys: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)


    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    val storeKeys = getStoreKeyList(jObj, "payload.")

    storeKeys

  })

  def getStoreKeyList(jVal: JValue, sourceStr: String = ""): List[getProviderOrganizationStoreKeySchema] = {
    val (pkeyName, skeyName) = (s"$sourceStr" + "storeKeySet.primaryKey", s"$sourceStr" + "storeKeySet.secondaryKeys")
    val (pkList, skList) = (getJSONValue[List[JObject]](jVal, pkeyName), getJSONValue[List[JObject]](jVal, skeyName))
    val primaryStoreInd = pkList != null
    val secStoreInd = skList != null
    val pkCheck = if (primaryStoreInd) {
      val pk = List(loop(jVal, pkeyName.split("\\.")).asInstanceOf[JObject])
      getStoreKeyVal(pk, true)
    } else List(): List[getProviderOrganizationStoreKeySchema]
    val skCheck = if (secStoreInd) {
      getStoreKeyVal(skList, false)
    } else List(): List[getProviderOrganizationStoreKeySchema]
    pkCheck ::: skCheck
  }

  def getStoreKeyVal(list: List[JObject], storeInd: Boolean): List[getProviderOrganizationStoreKeySchema] = {
    val kc = List(("", ""))
    if (list == null) List(): List[getProviderOrganizationStoreKeySchema]
    else list.map(x => {
      (
        getJSONValue[String](x, "storeName"),
        getJSONValue[String](x, "keyName"),
        storeInd,
        if (getJSONValue[List[JObject]](x, "keyComponents").eq(null)) kc
        else (getJSONValue[List[JObject]](x, "keyComponents").
          map(x => (getJSONValue[String](x, "name"), getJSONValue[String](x, "value")))),
        getJSONValue[String](x, "status.value"),
        getTimeStampPract(getJSONValue[String](x, "status.effectiveDateTime")),
        getJSONValue[String](x, "status.effectiveDateTime"),
        if (getJSONValue[String](x, "status.effectiveDateTime").eq(null)) ""
        else entityTimeZone,
        getTimeStampPract(getJSONValue[String](x, "status.expirationDateTime")),
        getJSONValue[String](x, "status.expirationDateTime"),
        if (getJSONValue[String](x, "status.expirationDateTime").eq(null)) ""
        else entityTimeZone
      )
    }).flatMap {
      case (b, c, d, e, f, g, h, i, j, k, l) => e.map(v => getProviderOrganizationStoreKeySchema.apply(b, c, d, v._1, v._2, f, g, h, i, j, k, l))
    }
  }

  private def getProviderOrganizationTaxonomy: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val taxonomyList = getJSONValue[List[JValue]](jObj, "payload.taxonomyCodes")
    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    if (null == taxonomyList) {
      //List(getTaxonomySchema.apply(null,null,false,null,null,null,null,null,null,null,null,null,null,null,null,null))
      List()
    } else taxonomyList.map(jVal => {
      if (jVal == null) null else{
        getTaxList(jVal, "")
      }
    })
  })

  def getTaxList(jVal: JValue, parentKey: String): getProviderOrganizationTaxonomySchema = {
    getProviderOrganizationTaxonomySchema.apply(
      getJSONValue[String](jVal, "code"),
      getJSONValue[String](jVal, "relativeId"),
      getJSONValue[Boolean](jVal, "primaryIndicator"),
      getJSONValue[String](jVal, "taxonomyType"),
      getJSONValue[String](jVal, "specialization"),
      getJSONValue[String](jVal, "category"),
      getJSONValue[String](jVal, "sourcedFrom.sourceName"),
      getJSONValue[String](jVal, "sourcedFrom.sourceType"),
      getJSONValue[String](jVal, "sourcedFrom.method"),
      getTimeStamp(getJSONValue[String](jVal, "sourcedFrom.updatedDateTime")),
      getJSONValue[String](jVal, "sourcedFrom.updatedDateTime"),
      if (getJSONValue[String](jVal, "sourcedFrom.updatedDateTime").eq(null)) ""
      else entityTimeZone,
      getJSONValue[String](jVal, "status.value"),
      getTimeStamp(getJSONValue[String](jVal, "status.effectiveDateTime")),
      getJSONValue[String](jVal, "status.effectiveDateTime"),
      if (getJSONValue[String](jVal, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "status.expirationDateTime")),
      getJSONValue[String](jVal, "status.expirationDateTime"),
      if (getJSONValue[String](jVal, "status.expirationDateTime").eq(null)) ""
      else entityTimeZone
    )
  }

  private def getProviderOrganizationEmailAddress: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val emailList = getJSONValue[List[JObject]](jObj, "payload.emailAddresses")
    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    if (null == emailList) {
      List()
    } else emailList.map(jVal => {
      if (jVal == null) null else {
        getEmailAddr(jVal, "")
      }
    })
  })

  def getEmailAddr(jVal: JValue, parentKey: String): getProviderOrganizationEmailAddressSchema = {
    getProviderOrganizationEmailAddressSchema.apply(
      getJSONValue[String](jVal, "address"),
      getJSONValue[String](jVal, "relativeId"),
      getJSONValue[String](jVal, "status.value"),
      getTimeStamp(getJSONValue[String](jVal, "status.effectiveDateTime")),
      getJSONValue[String](jVal, "status.effectiveDateTime"),
      if (getJSONValue[String](jVal, "status.effectiveDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "status.expirationDateTime")),
      getJSONValue[String](jVal, "status.expirationDateTime"),
      if (getJSONValue[String](jVal, "status.expirationDateTime").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "sourcedFrom.sourceName"),
      getJSONValue[String](jVal, "sourcedFrom.sourceType"),
      getJSONValue[String](jVal, "sourcedFrom.method"),
      getTimeStamp(getJSONValue[String](jVal, "sourcedFrom.updatedDateTime")),
      getJSONValue[String](jVal, "sourcedFrom.updatedDateTime"),
      if (getJSONValue[String](jVal, "sourcedFrom.updatedDateTime").eq(null)) null
      else entityTimeZone,
      getJSONValue[Boolean](jVal, "unreachable.indicator"),
      getTimeStamp(getJSONValue[String](jVal, "unreachable.effectiveDate")),
      getJSONValue[String](jVal, "unreachable.effectiveDate"),
      if (getJSONValue[String](jVal, "unreachable.effectiveDate").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "unreachable.note"),
      getJSONValue[Boolean](jVal, "unverified.indicator"),
      getTimeStamp(getJSONValue[String](jVal, "unverified.effectiveDate")),
      getJSONValue[String](jVal, "unverified.effectiveDate"),
      if (getJSONValue[String](jVal, "unverified.effectiveDate").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "unverified.note")
    )
  }

  private def getProviderOrganizationPhone: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val phList = getJSONValue[List[JObject]](jObj, "payload.phoneNumbers")
    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    if (null == phList) {
      List()
    } else phList.map(jVal => {
      if (jVal == null) null else {
        getPhNum(jVal, "")
      }
    })
  })

  def getPhEffectivity(jVal: JValue): List[getProviderOrganizationPhoneConfirmationEffectivitySchema] = {
    val phEffList = getJSONValue[List[JObject]](jVal, "effectivityPeriod")
    if (phEffList == null) List()
    else phEffList.map(x => getProviderOrganizationPhoneConfirmationEffectivitySchema.apply(
      "", // provider_organization_phone_confirmation_id
      getJSONValue[String](x, "start"),
      getJSONValue[String](x, "end"),
      getJSONValue[String](x, "received"),
      getJSONValue[String](x, "ceased"),
      getTimeStamp(getJSONValue[String](x, "start")),
      if (getJSONValue[String](x, "start").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "end")),
      if (getJSONValue[String](x, "end").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "received")),
      if (getJSONValue[String](x, "received").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "ceased")),
      if (getJSONValue[String](x, "ceased").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](x, "ceasedCode")
    ))
  }

  def getPhConf(jVal: JValue): List[getProviderOrganizationPhoneConfirmationSchema] = {
    val phConfList = getJSONValue[List[JObject]](jVal, "confirmed")
    if (phConfList == null) List()
    else phConfList.map(x => getProviderOrganizationPhoneConfirmationSchema.apply(
      getJSONValue[String](x, "confirmed"),
      getJSONValue[String](x, "associatedAddress"),
      "", // provider_organization_phone_number_id
      getJSONValue[Boolean](x, "indicator"),
      getJSONValue[String](x, "verificationRationale"),
      getPhEffectivity(x)
    ))
  }

  def getPhNum(jVal: JValue, parentKey: String): getProviderOrganizationPhoneSchema = {
    getProviderOrganizationPhoneSchema.apply(
      getJSONValue[String](jVal, "relativeId"),
      getJSONValue[String](jVal, "relativeId"),
      getJSONValue[String](jVal, "providedPhoneNumber"),
      getJSONValue[String](jVal, "contactUsageType"),
      getJSONValue[String](jVal, "countryCallingCode"),
      getJSONValue[String](jVal, "number"),
      getJSONValue[String](jVal, "extension"),
      getJSONValue[Boolean](jVal, "capabilities.fax"),
      getJSONValue[Boolean](jVal, "capabilities.voice"),
      getJSONValue[Boolean](jVal, "capabilities.text"),
      getJSONValue[String](jVal, "status.value"),
      getTimeStamp(getJSONValue[String](jVal, "status.effectiveDateTime")),
      getJSONValue[String](jVal, "status.effectiveDateTime"),
      if (getJSONValue[String](jVal, "status.effectiveDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "status.expirationDateTime")),
      getJSONValue[String](jVal, "status.expirationDateTime"),
      if (getJSONValue[String](jVal, "status.expirationDateTime").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "sourcedFrom.sourceName"),
      getJSONValue[String](jVal, "sourcedFrom.sourceType"),
      getJSONValue[String](jVal, "sourcedFrom.method"),
      getTimeStamp(getJSONValue[String](jVal, "sourcedFrom.updatedDateTime")),
      getJSONValue[String](jVal, "sourcedFrom.updatedDateTime"),
      if (getJSONValue[String](jVal, "sourcedFrom.updatedDateTime").eq(null)) null
      else entityTimeZone,
      getJSONValue[Boolean](jVal, "standardizedIndicator"),
      getJSONValue[Boolean](jVal, "unreachable.indicator"),
      getTimeStamp(getJSONValue[String](jVal, "unreachable.effectiveDate")),
      getJSONValue[String](jVal, "unreachable.effectiveDate"),
      if (getJSONValue[String](jVal, "unreachable.effectiveDate").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "unreachable.note"),
      getJSONValue[Boolean](jVal, "unverified.indicator"),
      getTimeStamp(getJSONValue[String](jVal, "unverified.effectiveDate")),
      getJSONValue[String](jVal, "unverified.effectiveDate"),
      if (getJSONValue[String](jVal, "unverified.effectiveDate").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "unverified.note"),
      {
        val associateAddrList = getJSONValue[List[JValue]](jVal, "associatedAddresses")
        if (associateAddrList.eq(null)) null else associateAddrList.map(x => getVal[String](x)).filterNot(_ == null)
      },
      getPhConf(jVal)
    )
  }

  private def getProviderOrganizationPostalAddress: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val postalAddrList = getJSONValue[List[JObject]](jObj, "payload.postalAddresses")
    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    if (null == postalAddrList) {
      List()
    } else postalAddrList.map(jVal => {
      if (jVal == null) null else {
        getPostAddr(jVal, "")
      }
    })
  })

  def getPostAddr(jVal: JValue, parentKey: String): getProviderOrganizationPostalAddressSchema = {
    getProviderOrganizationPostalAddressSchema.apply(
      getJSONValue[String](jVal, "relativeId"),
      getJSONValue[String](jVal, "relativeId"),
      getJSONValue[String](jVal, "contactUsageType"),
      if (getJSONValue[List[JValue]](jVal, "streetAddress").eq(null)) null
      else getJSONValue[List[JValue]](jVal, "streetAddress").
        map(x => getVal[String](x)).filterNot(_ == null),
      getJSONValue[String](jVal, "apartmentNumber"),
      getJSONValue[String](jVal, "officeSuite"),
      getJSONValue[String](jVal, "postOfficeBoxNumber"),
      getJSONValue[String](jVal, "postalCode"),
      getJSONValue[String](jVal, "city"),
      getJSONValue[String](jVal, "state.code"),
      getJSONValue[String](jVal, "state.name"),
      getJSONValue[String](jVal, "state.description"),
      getJSONValue[String](jVal, "country.iso2Code"),
      getJSONValue[String](jVal, "country.iso3Code"),
      getJSONValue[String](jVal, "country.name"),
      getJSONValue[String](jVal, "country.description"),
      getJSONValue[Boolean](jVal, "standardizedIndicator"),
      if (getJSONValue[List[JValue]](jVal, "providedAddress.streetAddress").eq(null)) null
      else getJSONValue[List[JValue]](jVal, "providedAddress.streetAddress").
        map(x => getVal[String](x)).filterNot(_ == null),
      getJSONValue[String](jVal, "providedAddress.city"),
      getJSONValue[String](jVal, "providedAddress.postalCode"),
      getJSONValue[String](jVal, "providedAddress.state.code"),
      getJSONValue[String](jVal, "providedAddress.country.name"),
      getJSONValue[String](jVal, "sourcedFrom.sourceName"),
      getJSONValue[String](jVal, "sourcedFrom.sourceType"),
      getJSONValue[String](jVal, "sourcedFrom.method"),
      getTimeStamp(getJSONValue[String](jVal, "sourcedFrom.updatedDateTime")),
      getJSONValue[String](jVal, "status.value"),
      getTimeStamp(getJSONValue[String](jVal, "status.effectiveDateTime")),
      getJSONValue[String](jVal, "status.effectiveDateTime"),
      if (getJSONValue[String](jVal, "status.effectiveDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "status.expirationDateTime")),
      getJSONValue[String](jVal, "status.expirationDateTime"),
      if (getJSONValue[String](jVal, "status.expirationDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "temporary.effectiveDate")),
      getJSONValue[String](jVal, "temporary.effectiveDate"),
      if (getJSONValue[String](jVal, "temporary.effectiveDate").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "temporary.expirationDate")),
      getJSONValue[String](jVal, "temporary.expirationDate"),
      if (getJSONValue[String](jVal, "temporary.expirationDate").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "temporary.note"),
      getJSONValue[Boolean](jVal, "unreachable.indicator"),
      getTimeStamp(getJSONValue[String](jVal, "unreachable.effectiveDate")),
      getJSONValue[String](jVal, "unreachable.effectiveDate"),
      if (getJSONValue[String](jVal, "unreachable.effectiveDate").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "unreachable.note"),
      getJSONValue[Boolean](jVal, "unverified.indicator"),
      getTimeStamp(getJSONValue[String](jVal, "unverified.effectiveDate")),
      getJSONValue[String](jVal, "unverified.effectiveDate"),
      if (getJSONValue[String](jVal, "unverified.effectiveDate").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "unverified.note"),
      getJSONValue[String](jVal, "uspsAddressType")
    )
  }

  private def getProviderOrganizationDeaId: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val deasList = getJSONValue[List[JObject]](jObj, "payload.agencyIdentifiers.deas")
    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    if (null == deasList) {
      List()
    } else deasList.map(jVal => {
      if (jVal == null) null else {
        getDeas(jVal, "")
      }
    })
  })

  def getDeaAuthorizationsList(jVal: JValue): List[getProviderOrganizationDeaAuthorizationSchema] = {
    val deaList = getJSONValue[List[JObject]](jVal, "deaAuthorizations")
    getDeaAuthorizationsVal(deaList)
  }

  def getDeaAuthorizationsVal(list: List[JObject]): List[getProviderOrganizationDeaAuthorizationSchema] = {
    if (list == null) List()
    else list.map(x => getProviderOrganizationDeaAuthorizationSchema.apply(
      getJSONValue[Boolean](x, "schedule1"),
      getJSONValue[Boolean](x, "schedule2"),
      getJSONValue[Boolean](x, "schedule2N"),
      getJSONValue[Boolean](x, "schedule3"),
      getJSONValue[Boolean](x, "schedule3N"),
      getJSONValue[Boolean](x, "schedule4"),
      getJSONValue[Boolean](x, "schedule5"),
      getJSONValue[Boolean](x, "list"),
      getJSONValue[String](x, "status.value"),
      getTimeStamp(getJSONValue[String](x, "status.effectiveDateTime")),
      getJSONValue[String](x, "status.effectiveDateTime"),
      if (getJSONValue[String](x, "status.effectiveDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "status.expirationDateTime")),
      getJSONValue[String](x, "status.expirationDateTime"),
      if (getJSONValue[String](x, "status.expirationDateTime").eq(null)) null
      else entityTimeZone
    ))
  }

  def getDeaEffectivity(jVal: JValue): List[getProviderOrganizationDeaIdEffectivitySchema] = {
    val deaEffList = getJSONValue[List[JObject]](jVal, "effectivityPeriods")
    if (deaEffList == null) List()
    else deaEffList.map(x => getProviderOrganizationDeaIdEffectivitySchema.apply(
      getJSONValue[String](x, "start"),
      getJSONValue[String](x, "end"),
      getJSONValue[String](x, "received"),
      getJSONValue[String](x, "ceased"),
      getTimeStamp(getJSONValue[String](x, "start")),
      if (getJSONValue[String](x, "start").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "end")),
      if (getJSONValue[String](x, "end").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "received")),
      if (getJSONValue[String](x, "received").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "ceased")),
      if (getJSONValue[String](x, "ceased").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](x, "ceasedCode.value"),
      getJSONValue[String](x, "ceasedCode.description")
    ))
  }

  def getDeas(jVal: JValue, parentKey: String): getProviderOrganizationDeaIdSchema = {
    getProviderOrganizationDeaIdSchema.apply(
      getJSONValue[String](jVal, "value"),
      getJSONValue[String](jVal, "issuingLocation"),
      getJSONValue[String](jVal, "issuingState.code"),
      getJSONValue[String](jVal, "issuingAddress"),
      getJSONValue[String](jVal, "issuingAgency"),
      getJSONValue[String](jVal, "issuingState.name"),
      getJSONValue[String](jVal, "issuingState.description"),
      getJSONValue[String](jVal, "status.value"),
      getTimeStamp(getJSONValue[String](jVal, "status.effectiveDateTime")),
      getJSONValue[String](jVal, "status.effectiveDateTime"),
      if (getJSONValue[String](jVal, "status.effectiveDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "status.expirationDateTime")),
      getJSONValue[String](jVal, "status.expirationDateTime"),
      if (getJSONValue[String](jVal, "status.expirationDateTime").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "businessActivity.code"),
      getJSONValue[String](jVal, "businessActivity.subcode"),
      getJSONValue[String](jVal, "businessActivity.subtypeDescription"),
      getDeaAuthorizationsList(jVal),
      getDeaEffectivity(jVal)
    )
  }

  private def getProviderOrganizationMedicaidId: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val medList = getJSONValue[List[JObject]](jObj, "payload.agencyIdentifiers.medicaidIdentifiers")
    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    if (null == medList) {
      List()
    } else medList.map(jVal => {
      if (jVal == null) null else {
        getMedicaid(jVal, "")
      }
    })
  })

  def getMedEffectivity(jVal: JValue): List[getProviderOrganizationMedicaidIdEffectivitySchema] = {
    val medEffList = getJSONValue[List[JObject]](jVal, "effectivityPeriods")
    if (medEffList == null) List()
    else medEffList.map(x => getProviderOrganizationMedicaidIdEffectivitySchema.apply(
      getJSONValue[String](x, "value"),
      getJSONValue[String](x, "issuingState.code"),
      getJSONValue[String](x, "start"),
      getJSONValue[String](x, "end"),
      getJSONValue[String](x, "received"),
      getJSONValue[String](x, "ceased"),
      getTimeStamp(getJSONValue[String](x, "start")),
      if (getJSONValue[String](x, "start").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "end")),
      if (getJSONValue[String](x, "end").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "received")),
      if (getJSONValue[String](x, "received").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](x, "ceased")),
      if (getJSONValue[String](x, "ceased").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](x, "ceasedCode.value"),
      getJSONValue[String](x, "ceasedCode.description")
    ))
  }

  def getMedicaid(jVal: JValue, parentKey: String): getProviderOrganizationMedicaidIdSchema = {
    getProviderOrganizationMedicaidIdSchema.apply(
      getJSONValue[String](jVal, "value"),
      getJSONValue[String](jVal, "issuingState.code"),
      getJSONValue[String](jVal, "issuingLocation"),
      getJSONValue[String](jVal, "issuingAgency"),
      getJSONValue[String](jVal, "issuingState.name"),
      getJSONValue[String](jVal, "issuingState.description"),
      getJSONValue[String](jVal, "status.value"),
      getTimeStamp(getJSONValue[String](jVal, "status.effectiveDateTime")),
      getJSONValue[String](jVal, "status.effectiveDateTime"),
      if (getJSONValue[String](jVal, "status.effectiveDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "status.expirationDateTime")),
      getJSONValue[String](jVal, "status.expirationDateTime"),
      if (getJSONValue[String](jVal, "status.expirationDateTime").eq(null)) null
      else entityTimeZone,
      getMedEffectivity(jVal)
    )
  }

  private def getProviderOrganizationNpi: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val npiList = getJSONValue[List[JObject]](jObj, "payload.agencyIdentifiers.npi")
    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    if (null == npiList) {
      List()
    } else {
      List(getNpi(jObj, "payload.agencyIdentifiers.npi."))
    }
  })

  def getNpiEffectivityVal(jVal: JValue, parentKey: String): getProviderOrganizationNpiEffectivitySchema = {
    getProviderOrganizationNpiEffectivitySchema.apply(
      getJSONValue[String](jVal, "start"),
      getJSONValue[String](jVal, "end"),
      getJSONValue[String](jVal, "received"),
      getJSONValue[String](jVal, "ceased"),
      getTimeStamp(getJSONValue[String](jVal, "start")),
      if (getJSONValue[String](jVal, "start").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "end")),
      if (getJSONValue[String](jVal, "end").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "received")),
      if (getJSONValue[String](jVal, "received").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "ceased")),
      if (getJSONValue[String](jVal, "ceased").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "ceasedCode.value"),
      getJSONValue[String](jVal, "ceasedCode.description")
    )
  }

  def getNpiEffectivity(jVal: JValue, parentKey: String): List[getProviderOrganizationNpiEffectivitySchema] = {
    val npiEffList = getJSONValue[List[JObject]](jVal, s"${parentKey}effectivityPeriods")
    if (npiEffList == null) List()
    else npiEffList.map(x => if (x == null) null else getNpiEffectivityVal(x, ""))
  }

  def getNpi(jVal: JValue, parentKey: String): getProviderOrganizationNpiSchema = {
    getProviderOrganizationNpiSchema.apply(
      getJSONValue[String](jVal, s"${parentKey}value"),
      getJSONValue[String](jVal, s"${parentKey}issuingState.code"),
      getJSONValue[String](jVal, s"${parentKey}issuingLocation"),
      getJSONValue[String](jVal, s"${parentKey}issuingAgency"),
      getJSONValue[String](jVal, s"${parentKey}issuingState.name"),
      getJSONValue[String](jVal, s"${parentKey}issuingState.description"),
      getJSONValue[String](jVal, s"${parentKey}status.value"),
      getTimeStamp(getJSONValue[String](jVal, s"${parentKey}status.effectiveDateTime")),
      getJSONValue[String](jVal, s"${parentKey}status.effectiveDateTime"),
      if (getJSONValue[String](jVal, s"${parentKey}status.effectiveDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, s"${parentKey}status.expirationDateTime")),
      getJSONValue[String](jVal, s"${parentKey}status.expirationDateTime"),
      if (getJSONValue[String](jVal, s"${parentKey}status.expirationDateTime").eq(null)) null
      else entityTimeZone,
      getNpiEffectivity(jVal, parentKey)
    )
  }

  private def getProviderOrganizationSpi: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val spiList = getJSONValue[List[JObject]](jObj, "payload.agencyIdentifiers.spi")
    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    if (null == spiList) {
      List()
    } else {
      List(getSpi(jObj, "payload.agencyIdentifiers.spi."))
    }
  })

  def getSpiEffectivity(jVal: JValue, parentKey: String): List[getProviderOrganizationSpiEffectivitySchema] = {
    val spiEffList = getJSONValue[List[JObject]](jVal, s"${parentKey}effectivityPeriods")
    if (spiEffList == null) List()
    else spiEffList.map(x => if (x == null) null else getSpiEffectivityVal(x, ""))
  }

  def getSpiEffectivityVal(jVal: JValue, parentKey: String): getProviderOrganizationSpiEffectivitySchema = {
    getProviderOrganizationSpiEffectivitySchema.apply(
      getJSONValue[String](jVal, "start"),
      getJSONValue[String](jVal, "end"),
      getJSONValue[String](jVal, "received"),
      getJSONValue[String](jVal, "ceased"),
      getTimeStamp(getJSONValue[String](jVal, "start")),
      if (getJSONValue[String](jVal, "start").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "end")),
      if (getJSONValue[String](jVal, "end").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "received")),
      if (getJSONValue[String](jVal, "received").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, "ceased")),
      if (getJSONValue[String](jVal, "ceased").eq(null)) null
      else entityTimeZone,
      getJSONValue[String](jVal, "ceasedCode.value"),
      getJSONValue[String](jVal, "ceasedCode.description")
    )
  }

  def getSpi(jVal: JValue, parentKey: String): getProviderOrganizationSpiSchema = {
    getProviderOrganizationSpiSchema.apply(
      getJSONValue[String](jVal, s"${parentKey}value"),
      getJSONValue[String](jVal, s"${parentKey}issuingState.code"),
      getJSONValue[String](jVal, s"${parentKey}issuingLocation"),
      getJSONValue[String](jVal, s"${parentKey}issuingAgency"),
      getJSONValue[String](jVal, s"${parentKey}issuingState.name"),
      getJSONValue[String](jVal, s"${parentKey}issuingState.description"),
      getJSONValue[String](jVal, s"${parentKey}status.value"),
      getTimeStamp(getJSONValue[String](jVal, s"${parentKey}status.effectiveDateTime")),
      getJSONValue[String](jVal, s"${parentKey}status.effectiveDateTime"),
      if (getJSONValue[String](jVal, s"${parentKey}status.effectiveDateTime").eq(null)) null
      else entityTimeZone,
      getTimeStamp(getJSONValue[String](jVal, s"${parentKey}status.expirationDateTime")),
      getJSONValue[String](jVal, s"${parentKey}status.expirationDateTime"),
      if (getJSONValue[String](jVal, s"${parentKey}status.expirationDateTime").eq(null)) null
      else entityTimeZone,
      getSpiEffectivity(jVal, parentKey)
    )
  }

  private def getNpi: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    val cal = Calendar.getInstance()
    val currDate = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS").format(new Date(cal.getTimeInMillis))
    val npiStatusEffDte = getJSONValue[String](jObj, "payload.agencyIdentifiers.npi.status.effectiveDateTime")
    val npiStatusExpDte = getJSONValue[String](jObj, "payload.agencyIdentifiers.npi.status.expirationDateTime")

    def getNpiVal(jVal: JValue): String = {
      val npi = {
        if ((npiStatusEffDte.ne(null)) && (npiStatusExpDte.ne(null))) {
          if ((npiStatusEffDte <= currDate) && (npiStatusExpDte > currDate)) {
            getJSONValue[String](jObj, "payload.agencyIdentifiers.npi.value")
          }
          else null
        }
        else if (npiStatusEffDte.ne(null)) {
          if (npiStatusEffDte <= currDate) {
            getJSONValue[String](jObj, "payload.agencyIdentifiers.npi.value")
          }
          else null
        }
        else null
      }
      npi
    }

    val npi = getNpiVal(jObj)

    npi

  })

  private def getDoingBusiness: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    val doingBusiness = {
      val dbList = getJSONValue[List[JValue]](jObj, "payload.name.doingBusinessAs")
      if (dbList.eq(null)) List() else dbList.map(x => getVal[String](x))
    }

    doingBusiness

  })

  private def getFormerLegal: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    val formerLegal = {
      val flList = getJSONValue[List[JValue]](jObj, "payload.name.formerLegal")
      if (flList.eq(null)) List() else flList.map(x => getVal[String](x))
    }

    formerLegal

  })

  private def getAlternatives: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    val alternatives = {
      val alterList = getJSONValue[List[JValue]](jObj, "payload.name.alternatives")
      if (alterList.eq(null)) List() else alterList.map(x => getVal[String](x))
    }

    alternatives

  })

  private def getTenantId: UserDefinedFunction = udf((jsonStr: String) => {

    val jObj = parseJson(jsonStr)

    val resourceId = getJSONValue[String](jObj, "payload.resourceId")

    val tenantId = {
      if (getJSONValue[BigInt](jObj, "payload.tenantId").eq(null)) 0L
      else getJSONValue[BigInt](jObj, "payload.tenantId").toLong
    }

    tenantId

  })



  override def doTransform(input: ConfigParser.DPFConfig, df: DataFrame, config: Config): DataFrame = {
   //val jsonCol = "kafka_value"

    val initDf = initialMapping(input, df)

    //val outputColsOrder = input.custom.getJSONArray("columns_order").iterator.asScala.toList.map(_.toString)


    val tempDf = initDf.
      withColumn("npi_num", getNpi(col("kafka_value"))).
      withColumn("doing_business_as_nmes", getDoingBusiness(col("kafka_value"))).
      withColumn("former_legal_nmes", getFormerLegal(col("kafka_value"))).
      withColumn("alternative_nmes", getAlternatives(col("kafka_value"))).
      withColumn("tenant_id", getTenantId(col("kafka_value"))).
      withColumn("provider_organization_store_key", getProviderOrganizationStoreKeys(col("kafka_value"))).
      withColumn("provider_organization_taxonomy", getProviderOrganizationTaxonomy(col("kafka_value"))).
      withColumn("provider_organization_email_address", getProviderOrganizationEmailAddress(col("kafka_value"))).
      withColumn("provider_organization_phone", getProviderOrganizationPhone(col("kafka_value"))).
      withColumn("provider_organization_postal_address", getProviderOrganizationPostalAddress(col("kafka_value"))).
      withColumn("provider_organization_dea_id", getProviderOrganizationDeaId(col("kafka_value"))).
      withColumn("provider_organization_medicaid_id", getProviderOrganizationMedicaidId(col("kafka_value"))).
      withColumn("provider_organization_npi", getProviderOrganizationNpi(col("kafka_value"))).
      withColumn("provider_organization_spi", getProviderOrganizationSpi(col("kafka_value")))



    val transformedDf = tempDf.withColumn("data_lake_last_update_ts", current_timestamp)

    transformedDf
  }

}
