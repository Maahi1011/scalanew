package com.esi.dpe.practitioner

import java.text.SimpleDateFormat
import java.util.TimeZone
import com.esi.dpe.utils.TimeZoneUtils._
import com.esi.dpe.practitioner.PractitionerSchema._
import com.esi.dpe.utils.JsonUtils.{getJSONValue, getVal, loop}
import com.esi.dpe.utils.TimeZoneUtils.entityTimeZone
import com.typesafe.config.Config
import com.typesafe.scalalogging.LazyLogging
import com.yotabites.config.ConfigParser.DPFConfig
import com.yotabites.custom.HBaseTransform
import org.apache.hadoop.hbase.client.Scan
import org.apache.hadoop.hbase.spark.HBaseContext
import org.apache.hadoop.hbase.util.Bytes
import org.apache.hadoop.hbase.{CellUtil, TableName}
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._
import org.apache.spark.sql.{DataFrame, Row, SparkSession}
import org.json4s.jackson.JsonMethods.parse
import org.json4s.{JObject, JValue}
import org.json4s.JsonDSL._

import scala.collection.JavaConverters._
import scala.util.Try

class PractitionerEntityTransform extends HBaseTransform with LazyLogging with Serializable {

  override def transform(config: DPFConfig, spark: SparkSession, hbaseCtx: HBaseContext, scan: Scan): DataFrame = {
    val tableName = config.location
    val cf = config.columnFamily
    val jsonCol = "KAFKA_VALUE"

    val configMap = config.custom.getJSONObject("parent_mapping")
    val stringMapping = configMap.keySet.asScala.toList.map(x => (x, configMap.getString(x)))
    val outputColsOrder = config.custom.getJSONArray("columns_order").iterator.asScala.toList.map(_.toString)

    scan.addColumn(cf.getBytes, jsonCol.getBytes)
    val hbaseRdd = hbaseCtx.hbaseRDD(TableName.valueOf(tableName), scan)

    val colsRdd: RDD[List[Any]] = hbaseRdd.map(x => {
      val jsonStr = Bytes.toString(CellUtil.cloneValue(
        x._2.getColumnLatestCell(cf.getBytes, jsonCol.getBytes)
      ))
      val jObj = Try {
        parse(jsonStr)
      }.getOrElse(null)

      if (jObj == null) Nil else {
        val configMap =  try {
          stringMapping.map(x => getJSONValue[String](jObj, x._2))
        }
        catch {
          case e: Exception => e.printStackTrace();
            println("EXCEPT!")
            println(getJSONValue[String](jObj, "payload.resourceId"))
            println(e)
            sys.exit(1)
        }
        val conciergeIndicator = getJSONValue[Boolean](jObj, "payload.conciergeIndicator")
        val birthDt = if (getJSONValue[String](jObj, "payload.birthDate") != null)
          getDate(getJSONValue[String](jObj, "payload.birthDate").slice(0,10))
        else null
        val deathDt = if (getJSONValue[String](jObj, "payload.deathDate") != null)
          getDate(getJSONValue[String](jObj, "payload.deathDate").slice(0,10))
        else null
        val profSuffList = getJSONValue[List[JValue]](jObj, "payload.name.professionalSuffixes")
        val profSuff =if (profSuffList.eq(null)) null else profSuffList.map(x => getVal[String](x)).filterNot(_ == null)
        val specialtiesTxtList = getJSONValue[List[JValue]](jObj, "payload.specialties")
        val specialtiesTxt =if (specialtiesTxtList.eq(null)) null else specialtiesTxtList.map(x => getVal[String](x)).filterNot(_ == null)

        val tenantId = try {
          if (getJSONValue[BigInt](jObj, "payload.tenantId").eq(null)) 0L
          else getJSONValue[BigInt](jObj, "payload.tenantId").toLong
        }
        catch {
          case e: Exception => e.printStackTrace();
            println("tenantId Error!")
            println(" resource ID: "+getJSONValue[String](jObj, "payload.resourceId"))
            println(" tenant ID: "+getJSONValue[BigInt](jObj, "payload.tenantId"))
            println(e)
            sys.exit(1)
        }

        val lngList = getJSONValue[List[JValue]](jObj, "payload.languages")
        val lngp =  if (null != lngList) lngList.map(p => getLanguages(p)) else Nil
        val deaList = getJSONValue[List[JValue]](jObj, "payload.agencyIdentifiers.deas")
        val dea = if (deaList != null) deaList.map(p => getDeas(p)) else Nil
        val stLicenseList = getJSONValue[List[JValue]](jObj, "payload.agencyIdentifiers.stateLicenses")
        val stLicence = if (stLicenseList != null) stLicenseList.map(p => getStLicence(p)) else Nil
        val medicaidList = getJSONValue[List[JValue]](jObj, "payload.agencyIdentifiers.medicaidIdentifiers")
        val medicaid = if (medicaidList != null) medicaidList.map(p => getMedicaid(p)) else Nil
        val postalAddrList = getJSONValue[List[JValue]](jObj, "payload.postalAddresses")
        val postalAddr = if (postalAddrList != null) postalAddrList.map(p => getPostalAddresses(p)) else Nil
        val emailAddrList = getJSONValue[List[JValue]](jObj, "payload.emailAddresses")
        val emailAddr = if (emailAddrList != null) emailAddrList.map(p => getEmailAddresses(p)) else Nil
        val phNumList = getJSONValue[List[JValue]](jObj, "payload.phoneNumbers")
        val phNum = if (phNumList != null) phNumList.map(p => getPhoneNumbers(p)) else Nil

        val taxonomyList = getJSONValue[List[JValue]](jObj, "payload.taxonomyCodes")
        val taxonomy = if (taxonomyList != null) taxonomyList.map(p => getTaxonomy(p)) else Nil

        val addCols = birthDt :: deathDt :: tenantId :: conciergeIndicator :: configMap
        (addCols :+ profSuff :+ specialtiesTxt :+  lngp :+ getStoreKeyList(jObj,"payload.") :+ dea
          :+ stLicence :+ medicaid :+ postalAddr :+ emailAddr :+ phNum :+ taxonomy)
      }
    })

    val one2OneCols =  "birth_dte" :: "death_dte" :: "tenant_id" ::  "concierge_ind" :: stringMapping.map(_._1)
    val selCols = (one2OneCols :+ "name_professional_suffixes_txt" :+ "specialties_txt" :+ "languages" :+ "store_keys" :+ "dea_identifiers" :+ "state_license_identifiers"
      :+ "medicaid_identifiers" :+ "postal_addresses" :+ "email_addresses":+ "phone_numbers" :+ "taxonomy")

    val dfSchema = StructType(
      one2OneCols.map(x => if (x == "concierge_ind") StructField(x, BooleanType)
      else if (x == "birth_dte" || x == "death_dte") StructField(x, DateType)
      else if (x == "tenant_id") StructField(x, LongType)
      else StructField(x, StringType)) :+
        StructField("name_professional_suffixes_txt", getProfSufSchema) :+
        StructField("specialties_txt", getSpecialitiesSchema) :+
        StructField("languages", getLanguagesSchema) :+
        StructField("store_keys",getStoreKeySchema) :+
        StructField("dea_identifiers", getdeaIdentifiersSchema) :+
        StructField("state_license_identifiers",getStateLicenseIdentifiersSchema) :+
        StructField("medicaid_identifiers",getMedicaidIdentifiersSchema) :+
        StructField("postal_addresses", getPostalAddressesSchema) :+
        StructField("email_addresses",getEmailAddressesSchema) :+
        StructField("phone_numbers",getPhoneNumbersSchema) :+
        StructField("taxonomy",getTaxonomySchema)
    )

    val rowRdd = colsRdd.filter(_.nonEmpty).map(Row.fromSeq)
    val fdf = spark.createDataFrame(rowRdd, dfSchema)

    fdf.selectExpr(selCols: _*)
    val transformedDf = fdf.withColumn("data_lake_last_update_tms", current_timestamp)
      .withColumn("medical_education_nbr_status_effective_tms",
        to_timestamp(col("medical_education_nbr_status_effective_tms_txt")))
      .withColumn("medical_education_nbr_status_effective_timezone_txt", lit(entityTimeZone))

      .withColumn("medical_education_nbr_status_expiration_tms",
        to_timestamp(col("medical_education_nbr_status_expiration_tms_txt")))
      .withColumn("medical_education_nbr_status_expiration_timezone_txt", lit(entityTimeZone))

      .withColumn("military_id_status_effective_tms",
        to_timestamp(col("military_id_status_effective_tms_txt")))
      .withColumn("military_id_status_effective_timezone_txt", lit(entityTimeZone))

      .withColumn("military_id_status_expiration_tms",
        to_timestamp(col("military_id_status_expiration_tms_txt")))
      .withColumn("military_id_status_expiration_timezone_txt", lit(entityTimeZone))

      .withColumn("npi_status_effective_tms",
        to_timestamp(col("npi_status_effective_tms_txt")))
      .withColumn("npi_status_effective_timezone_txt", lit(entityTimeZone))

      .withColumn("npi_status_expiration_tms",
        to_timestamp(col("npi_status_expiration_tms_txt")))
      .withColumn("npi_status_expiration_timezone_txt", lit(entityTimeZone))

      .withColumn("spi_id_status_effective_tms",
        to_timestamp(col("spi_id_status_effective_tms_txt")))
      .withColumn("spi_id_status_effective_timezone_txt", lit(entityTimeZone))

      .withColumn("spi_id_status_expiration_tms",
        to_timestamp(col("spi_id_status_expiration_tms_txt")))
      .withColumn("spi_id_status_expiration_timezone_txt", lit(entityTimeZone))

      .withColumn("status_effective_tms",
        to_timestamp(col("status_effective_tms_txt")))
      .withColumn("status_effective_timezone_txt", lit(entityTimeZone))

      .withColumn("status_expiration_tms",
        to_timestamp(col("status_expiration_tms_txt")))
      .withColumn("status_expiration_timezone_txt", lit(entityTimeZone))
      .withColumn("tenant_id", col("tenant_id").cast("decimal(18)"))
    transformedDf.selectExpr(outputColsOrder:_*)
  }

  def getLanguages(jV: JValue): Row = {
    val row = Row.fromSeq(Seq(
      getJSONValue[String](jV, "code"),
      getJSONValue[String](jV, "name")
    ))
    row
  }

  def getDeaAuthorizationsVal(list: List[JObject]): List[Row] = {
    if (list == null) List(): List[Row]
    else list.map(x => Row.fromSeq(Seq(
      getJSONValue[Boolean](x, "schedule1"),
      getJSONValue[Boolean](x, "schedule2"),
      getJSONValue[Boolean](x, "schedule2N"),
      getJSONValue[Boolean](x, "schedule3"),
      getJSONValue[Boolean](x, "schedule3N"),
      getJSONValue[Boolean](x, "schedule4"),
      getJSONValue[Boolean](x, "schedule5"),
      getJSONValue[Boolean](x, "list"),
      getJSONValue[String](x, "status.value"),
      getTimeStampPract(getJSONValue[String](x, "status.effectiveDateTime")),
      getJSONValue[String](x, "status.effectiveDateTime"),
      if (getJSONValue[String](x, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](x, "status.expirationDateTime")),
      getJSONValue[String](x, "status.expirationDateTime"),
      if (getJSONValue[String](x, "status.expirationDateTime").eq(null)) ""
      else entityTimeZone
    )))
  }

  def getDeaAuthorizationsList(jVal: JValue): List[Row] = {
    val deaList = getJSONValue[List[JObject]](jVal, "deaAuthorizations")
    getDeaAuthorizationsVal(deaList)
  }

  def getDeas(jV: JValue): Row = {
    val row = Row.fromSeq(Seq(
      getJSONValue[String](jV,"value"),
      getJSONValue[String](jV,"issuingState.code"),
      getJSONValue[String](jV,"issuingLocation"),
      getJSONValue[String](jV,"issuingAgency"),
      getJSONValue[String](jV,"issuingAddress"),
      getJSONValue[String](jV,"status.value"),
      getTimeStampPract(getJSONValue[String](jV, "status.effectiveDateTime")),
      getJSONValue[String](jV,"status.effectiveDateTime"),
      if (getJSONValue[String](jV,"status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "status.expirationDateTime")),
      getJSONValue[String](jV,"status.expirationDateTime"),
      if (getJSONValue[String](jV,"status.expirationDateTime").eq(null)) ""
      else entityTimeZone,
      getDeaAuthorizationsList(jV)
    ))
    row
  }
  def getStLicence(jV: JValue): Row = {
    val row = Row.fromSeq(Seq(
      getJSONValue[String](jV, "value"),
      getJSONValue[String](jV, "issuingState.code"),
      getJSONValue[String](jV, "issuingAgency"),
      getJSONValue[String](jV, "issuingState.name"),
      getJSONValue[String](jV, "issuingState.description"),
      getJSONValue[String](jV, "status.value"),
      getTimeStampPract(getJSONValue[String](jV, "status.effectiveDateTime")),
      getJSONValue[String](jV, "status.effectiveDateTime"),
      if (getJSONValue[String](jV, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "status.expirationDateTime")),
      getJSONValue[String](jV, "status.expirationDateTime"),
      if (getJSONValue[String](jV, "status.expirationDateTime").eq(null)) ""
      else entityTimeZone
    ))
    row
  }
  def getMedicaid(jV: JValue): Row = {
    val row = Row.fromSeq(Seq(
      getJSONValue[String](jV, "value"),
      getJSONValue[String](jV, "issuingState.code"),
      getJSONValue[String](jV, "issuingState.name"),
      getJSONValue[String](jV, "issuingAgency"),
      getJSONValue[String](jV, "status.value"),
      getTimeStampPract(getJSONValue[String](jV, "status.effectiveDateTime")),
      getJSONValue[String](jV, "status.effectiveDateTime"),
      if (getJSONValue[String](jV, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "status.expirationDateTime")),
      getJSONValue[String](jV, "status.expirationDateTime"),
      if (getJSONValue[String](jV, "status.expirationDateTime").eq(null)) ""
      else entityTimeZone
    ))
    row
  }

  def getPostalAddresses(jV: JValue): Row = {
    val row = Row.fromSeq(Seq(
      getJSONValue[String](jV, "relativeId"),
      {
        val addrList = getJSONValue[List[JValue]](jV, "streetAddress")
        if (addrList.eq(null)) null else addrList.map(x => getVal[String](x)).filterNot(_ == null)
      },
      getJSONValue[String](jV, "officeSuite"),
      getJSONValue[String](jV, "apartmentNumber"),
      getJSONValue[String](jV, "postOfficeBoxNumber"),
      getJSONValue[String](jV, "postalCode"),
      getJSONValue[String](jV, "city"),
      getJSONValue[String](jV, "state.code"),
      getJSONValue[String](jV, "state.name"),
      getJSONValue[String](jV, "state.description"),
      getJSONValue[String](jV, "country.iso2code"),
      getJSONValue[String](jV, "country.iso3code"),
      getJSONValue[String](jV, "country.name"),
      getJSONValue[String](jV, "country.description"),
      getJSONValue[String](jV, "status.value"),
      getTimeStampPract(getJSONValue[String](jV, "status.effectiveDateTime")),
      getJSONValue[String](jV, "status.effectiveDateTime"),
      if (getJSONValue[String](jV, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "status.expirationDateTime")),
      getJSONValue[String](jV, "status.expirationDateTime"),
      if (getJSONValue[String](jV, "status.expirationDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "temporary.effectiveDate")),
      getJSONValue[String](jV, "temporary.effectiveDate"),
      if (getJSONValue[String](jV, "temporary.effectiveDate").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "temporary.expirationDate")),
      getJSONValue[String](jV, "temporary.expirationDate"),
      if (getJSONValue[String](jV, "temporary.expirationDate").eq(null)) ""
      else entityTimeZone,
      getJSONValue[String](jV, "temporary.note"),
      getJSONValue[Boolean](jV, "unreachable.indicator"),
      getTimeStampPract(getJSONValue[String](jV, "unreachable.effectiveDate")),
      getJSONValue[String](jV, "unreachable.effectiveDate"),
      if (getJSONValue[String](jV, "unreachable.effectiveDate").eq(null)) ""
      else entityTimeZone,
      getJSONValue[String](jV, "unreachable.note"),
      getJSONValue[Boolean](jV, "unverified.indicator"),
      getTimeStampPract(getJSONValue[String](jV, "unverified.effectiveDate")),
      getJSONValue[String](jV, "unverified.effectiveDate"),
      if (getJSONValue[String](jV, "unverified.effectiveDate").eq(null)) ""
      else entityTimeZone,
      getJSONValue[String](jV, "unverified.note"),
      getJSONValue[String](jV, "sourcedFrom.sourceName"),
      getJSONValue[String](jV, "sourcedFrom.sourceType"),
      getJSONValue[String](jV, "sourcedFrom.method")
    ))
    row
  }

  def getEmailAddresses(jV: JValue): Row = {
    val row = Row.fromSeq(Seq(
      getJSONValue[String](jV, "address"),
      getJSONValue[String](jV, "relativeId"),
      getJSONValue[String](jV, "status.value"),
      getTimeStampPract(getJSONValue[String](jV, "status.effectiveDateTime")),
      getJSONValue[String](jV, "status.effectiveDateTime"),
      if (getJSONValue[String](jV, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "status.expirationDateTime")),
      getJSONValue[String](jV, "status.expirationDateTime"),
      if (getJSONValue[String](jV, "status.expirationDateTime").eq(null)) ""
      else entityTimeZone,
      getJSONValue[Boolean](jV, "unreachable.indicator"),
      getTimeStampPract(getJSONValue[String](jV, "unreachable.effectiveDate")),
      getJSONValue[String](jV, "unreachable.effectiveDate"),
      if (getJSONValue[String](jV, "unreachable.effectiveDate").eq(null)) ""
      else entityTimeZone,
      getJSONValue[String](jV, "unreachable.note"),
      getJSONValue[Boolean](jV, "unverified.indicator"),
      getTimeStampPract(getJSONValue[String](jV, "unverified.effectiveDate")),
      getJSONValue[String](jV, "unverified.effectiveDate"),
      if (getJSONValue[String](jV, "unverified.effectiveDate").eq(null)) ""
      else entityTimeZone,
      getJSONValue[String](jV, "unverified.note")
    ))
    row
  }

  def getTaxonomy(jV: JValue): Row = {
    val row = Row.fromSeq(Seq(
      getJSONValue[String](jV, "code"),
      getJSONValue[String](jV, "category"),
      getJSONValue[Boolean](jV, "primaryIndicator"),
      getJSONValue[String](jV, "relativeId"),
      getJSONValue[String](jV, "taxonomyType"),
      getJSONValue[String](jV, "specialization"),
      getJSONValue[String](jV, "status.value"),
      getTimeStampPract(getJSONValue[String](jV, "status.effectiveDateTime")),
      getJSONValue[String](jV, "status.effectiveDateTime"),
      if (getJSONValue[String](jV, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "status.expirationDateTime")),
      getJSONValue[String](jV, "status.expirationDateTime"),
      if (getJSONValue[String](jV, "status.expirationDateTime").eq(null)) ""
      else entityTimeZone,
      //current_timestamp,
      getJSONValue[String](jV, "sourcedFrom.sourceName"),
      getJSONValue[String](jV, "sourcedFrom.sourceType"),
      getJSONValue[String](jV, "sourcedFrom.method")
    ))
    row
  }

  def getPhoneNumbers(jV: JValue): Row = {
    val row = Row.fromSeq(Seq(
      getJSONValue[String](jV, "countryCallingCode"),
      getJSONValue[String](jV, "number"),
      getJSONValue[String](jV, "extension"),
      getJSONValue[String](jV, "relativeId"),
      getJSONValue[Boolean](jV, "capabilities.fax"),
      getJSONValue[Boolean](jV, "capabilities.voice"),
      getJSONValue[Boolean](jV, "capabilities.text"),
      getJSONValue[String](jV, "status.value"),
      getTimeStampPract(getJSONValue[String](jV, "status.effectiveDateTime")),
      getJSONValue[String](jV, "status.effectiveDateTime"),
      if (getJSONValue[String](jV, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getTimeStampPract(getJSONValue[String](jV, "status.expirationDateTime")),
      getJSONValue[String](jV, "status.expirationDateTime"),
      if (getJSONValue[String](jV, "status.expirationDateTime").eq(null)) ""
      else entityTimeZone,
      getJSONValue[Boolean](jV, "unreachable.indicator"),
      getTimeStampPract(getJSONValue[String](jV, "unreachable.effectiveDate")),
      getJSONValue[String](jV, "status.effectiveDateTime"),
      if (getJSONValue[String](jV, "status.effectiveDateTime").eq(null)) ""
      else entityTimeZone,
      getJSONValue[String](jV, "unreachable.note"),
      getJSONValue[Boolean](jV, "unverified.indicator"),
      getTimeStampPract(getJSONValue[String](jV, "unverified.effectiveDate")),
      getTimeStampPract(getJSONValue[String](jV, "unverified.effectiveDate")),
      if (getJSONValue[String](jV, "unverified.effectiveDate").eq(null)) ""
      else entityTimeZone,
      getJSONValue[String](jV, "unverified.note"),
      {
        val associateAddrList = getJSONValue[List[JValue]](jV, "associatedAddresses")
        if (associateAddrList.eq(null)) null else associateAddrList.map(x => getVal[String](x)).filterNot(_ == null)
      }
    ))
    row
  }
  def getStoreKeyList(jVal: JValue, sourceStr: String=""): List[Row] = {
    val (pkeyName, skeyName) = (s"$sourceStr"+"storeKeySet.primaryKey", s"$sourceStr"+"storeKeySet.secondaryKeys")
    val (pkList, skList) = (getJSONValue[List[JObject]](jVal, pkeyName), getJSONValue[List[JObject]](jVal, skeyName))
    val primaryStoreInd = pkList != null
    val secStoreInd = skList != null
    val pkCheck = if (primaryStoreInd) {
      val pk = List(loop(jVal, pkeyName.split("\\.")).asInstanceOf[JObject])
      getStoreKeyVal(pk, true)
    } else List(): List[Row]
    val skCheck = if (secStoreInd) {
      getStoreKeyVal(skList, false)
    } else List(): List[Row]
    pkCheck ::: skCheck
  }

  def getStoreKeyVal(list: List[JObject], storeInd: Boolean): List[Row] = {
    val kc = List(("", ""))
    if (list == null) List(): List[Row]
    else list.map(x => {
      (
        getJSONValue[String](x, "storeName"),
        getJSONValue[String](x, "keyName"),
        storeInd,
        if (getJSONValue[List[JObject]](x, "keyComponents").eq(null)) kc
        else (getJSONValue[List[JObject]](x, "keyComponents").
          map(x => (getJSONValue[String](x, "name"), getJSONValue[String](x, "value")))),
        getJSONValue[String](x, "status.value"),
        getTimeStampPract(getJSONValue[String](x, "status.effectiveDateTime")),
        getJSONValue[String](x, "status.effectiveDateTime"),
        if (getJSONValue[String](x, "status.effectiveDateTime").eq(null)) ""
        else entityTimeZone,
        getTimeStampPract(getJSONValue[String](x, "status.expirationDateTime")),
        getJSONValue[String](x, "status.expirationDateTime"),
        if (getJSONValue[String](x, "status.expirationDateTime").eq(null)) ""
        else entityTimeZone
      )
    }).flatMap {
      case (b, c, d, e, f, g, h, i, j, k, l) => e.map(v => Row.fromSeq(Seq(b, c, d, v._1, v._2, f, g, h, i, j, k, l)))
    }
  }

  def getDate(strVal: String) = {
    if (strVal.eq(null)) null else {
      val dte = Try {
        java.sql.Date.valueOf(strVal)
      }.getOrElse(null)
      dte
    }
  }


  def getBool(strVal: String, key: String = "Y") = {
    if (strVal.eq(null)) null
    else if (strVal.equalsIgnoreCase(key)) true else false
  }



  override def save(df: DataFrame, spark: SparkSession, hbaseCtx: HBaseContext, config: Config): (Long, String) = null
}
